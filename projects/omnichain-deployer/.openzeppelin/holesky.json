{
  "manifestVersion": "3.2",
  "proxies": [
    {
      "address": "0x6899D7893e2d859b82D331B9dF00504893b717f3",
      "txHash": "0x5e2dbc80289ff70dc031a12eabea252e4211e630a2945adafeb2769912a01839",
      "kind": "transparent"
    },
    {
      "address": "0xF2b002c28aBa30C33e51fCAd9d2a074379e70053",
      "txHash": "0xbf8bdc542345b35aa7de0ce008642d8d67f5c6a6971a93c48fb794690517d4b3",
      "kind": "transparent"
    },
    {
      "address": "0x2f982C5A814206d3BF52473403a834aCaE2C67e9",
      "txHash": "0xd7137d47b3025aad0c747cbbf7602e431ea3e0ed1f8dd8e18ce89727d855c53b",
      "kind": "transparent"
    },
    {
      "address": "0x09908F11bcAF39C81631Efde9C0bEa9A575FD438",
      "txHash": "0x6ad1017bee19360dfad1b761d78ad65ff60071267d4d595865048a562a31e566",
      "kind": "transparent"
    },
    {
      "address": "0x7382C8aCD984f64730b93db26301d8eeC8e5b441",
      "txHash": "0xd74618b76a1ea2dc8331d2c0a00869a8d98167149c9edecfaa9e34c65f0ebba2",
      "kind": "transparent"
    },
    {
      "address": "0xcE3751e6f6E91235A205a77999a82f556eEBcBf3",
      "txHash": "0x81a8f24ae02e5b0c7db460f03bbd440eb3b9030a089f8a30c3b9b5a6d6ab1a51",
      "kind": "transparent"
    },
    {
      "address": "0x0A8c0FdC2b0d757228A52dCE08B219851baa8943",
      "txHash": "0xc5ed7e38d5fb1763d6c819a4328663748b5ca1360e4de656fa2827626c7f8d37",
      "kind": "transparent"
    },
    {
      "address": "0xab54b3B54e9ccD2EEB5671B937676Df29099e826",
      "txHash": "0xbf3e90b35865c9ec462faa04242df1b5604d44c66c5a0c861de080bb90370329",
      "kind": "transparent"
    },
    {
      "address": "0xBfBef1d3607F9D0bcE098A83850C48469C2DA0c9",
      "txHash": "0x2274fe9405ad1a21c3f5b305ad093c2cf76a8c27767da7d3ba91b273af710ea7",
      "kind": "transparent"
    },
    {
      "address": "0xf0A0fcDd5965BCbEF475E683B53536aD84fb3146",
      "txHash": "0x1252339c76e45797e9738180754310d7f75b4d833072e23f19ed2f130be46efb",
      "kind": "transparent"
    },
    {
      "address": "0x1DBc7202adBbDc71d8806288cC9a5da863005228",
      "txHash": "0x124b98f20fe7434a9691faddd86558ec8f32350478f4fcdc0f375a136834d3c8",
      "kind": "transparent"
    },
    {
      "address": "0x7bdccE77C958796027a3D3b2253f723d75491CA7",
      "txHash": "0x43b352b13c0833318883e2ce1b18dee9e95521ec99ce5dc37252b50f33274464",
      "kind": "transparent"
    },
    {
      "address": "0x8b2366eC5775497aE3E1a616C2E81dFa7dE6D13d",
      "txHash": "0xb63ab7606b136f8f88cabc6defd4811dc3441910ecd452056dc05e752901950c",
      "kind": "transparent"
    },
    {
      "address": "0x8CE6Ba86Df61FEB96a47364fE89d1C7217B3aF1b",
      "txHash": "0x075d6a56647a5b86d09b7918a760d89ceb633b9299815bddbbd6c3679cdd05aa",
      "kind": "transparent"
    },
    {
      "address": "0x4b16D1D74a8c11eDb04D817972D9D9735e90c527",
      "txHash": "0xac15305f983806ae25ee94e666cd0598ec505cf961d2bc64c606f5b06b4ada68",
      "kind": "transparent"
    }
  ],
  "impls": {
    "a6dc2772c973a2290112525d2e08835b68e19befa52ad848b68a24fb520cd855": {
      "address": "0xC593DCD051E489b48eb9eedB1EBb6F07C8487dF2",
      "txHash": "0x3dd4fa434dfe5ea2c3a7f73321456f01fac155efa2a38fbaf937e5125cf56c0c",
      "layout": {
        "solcVersion": "0.8.27",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "102",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "103",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "104",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:46"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "105",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:47"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "106",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:376"
          },
          {
            "label": "vault",
            "offset": 0,
            "slot": "151",
            "type": "t_contract(IInceptionVault_EL)19031",
            "contract": "InceptionToken",
            "src": "contracts/vaults/tokens/InceptionToken.sol:19"
          },
          {
            "label": "_paused",
            "offset": 20,
            "slot": "151",
            "type": "t_bool",
            "contract": "InceptionToken",
            "src": "contracts/vaults/tokens/InceptionToken.sol:21"
          },
          {
            "label": "rebalancer",
            "offset": 0,
            "slot": "152",
            "type": "t_address",
            "contract": "InceptionToken",
            "src": "contracts/vaults/tokens/InceptionToken.sol:23"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IInceptionVault_EL)19031": {
            "label": "contract IInceptionVault_EL",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    },
    "9e1d1cc5fdb27630525cae1e42981f6f9972292da42c6f6324ab33802efb1a2a": {
      "address": "0x177c00dd6783B3DC437Fb43C3Eb549cA53c4cdAB",
      "txHash": "0xb794d116c79b0d2251613f65708307f1e26ebfdc725c593a897a0d4b47c68972",
      "layout": {
        "solcVersion": "0.8.27",
        "storage": [
          {
            "label": "_asset",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)1004",
            "contract": "InceptionAssetsHandler",
            "src": "contracts/mocks/MockVault_flattened.sol:2095"
          },
          {
            "label": "__reserver",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)49_storage",
            "contract": "InceptionAssetsHandler",
            "src": "contracts/mocks/MockVault_flattened.sol:2097"
          },
          {
            "label": "strategy",
            "offset": 0,
            "slot": "50",
            "type": "t_address",
            "contract": "EigenLayerHandlerMock",
            "src": "contracts/mocks/MockVault_flattened.sol:2498"
          },
          {
            "label": "epoch",
            "offset": 0,
            "slot": "51",
            "type": "t_uint256",
            "contract": "EigenLayerHandlerMock",
            "src": "contracts/mocks/MockVault_flattened.sol:2500"
          },
          {
            "label": "_operator",
            "offset": 0,
            "slot": "52",
            "type": "t_address",
            "contract": "EigenLayerHandlerMock",
            "src": "contracts/mocks/MockVault_flattened.sol:2503"
          },
          {
            "label": "totalAmountToWithdraw",
            "offset": 0,
            "slot": "53",
            "type": "t_uint256",
            "contract": "EigenLayerHandlerMock",
            "src": "contracts/mocks/MockVault_flattened.sol:2507"
          },
          {
            "label": "_pendingWithdrawalAmount",
            "offset": 0,
            "slot": "54",
            "type": "t_uint256",
            "contract": "EigenLayerHandlerMock",
            "src": "contracts/mocks/MockVault_flattened.sol:2511"
          },
          {
            "label": "claimerWithdrawalsQueue",
            "offset": 0,
            "slot": "55",
            "type": "t_array(t_struct(Withdrawal)3355_storage)dyn_storage",
            "contract": "EigenLayerHandlerMock",
            "src": "contracts/mocks/MockVault_flattened.sol:2513"
          },
          {
            "label": "redeemReservedAmount",
            "offset": 0,
            "slot": "56",
            "type": "t_uint256",
            "contract": "EigenLayerHandlerMock",
            "src": "contracts/mocks/MockVault_flattened.sol:2519"
          },
          {
            "label": "depositBonusAmount",
            "offset": 0,
            "slot": "57",
            "type": "t_uint256",
            "contract": "EigenLayerHandlerMock",
            "src": "contracts/mocks/MockVault_flattened.sol:2525"
          },
          {
            "label": "targetCapacity",
            "offset": 0,
            "slot": "58",
            "type": "t_uint256",
            "contract": "EigenLayerHandlerMock",
            "src": "contracts/mocks/MockVault_flattened.sol:2528"
          },
          {
            "label": "__reserver",
            "offset": 0,
            "slot": "59",
            "type": "t_array(t_uint256)37_storage",
            "contract": "EigenLayerHandlerMock",
            "src": "contracts/mocks/MockVault_flattened.sol:2533"
          },
          {
            "label": "inceptionToken",
            "offset": 0,
            "slot": "96",
            "type": "t_contract(IInceptionToken)3858",
            "contract": "InceptionVaultMock",
            "src": "contracts/mocks/MockVault_flattened.sol:2899"
          },
          {
            "label": "minAmount",
            "offset": 0,
            "slot": "97",
            "type": "t_uint256",
            "contract": "InceptionVaultMock",
            "src": "contracts/mocks/MockVault_flattened.sol:2902"
          },
          {
            "label": "_claimerWithdrawals",
            "offset": 0,
            "slot": "98",
            "type": "t_mapping(t_address,t_struct(Withdrawal)3355_storage)",
            "contract": "InceptionVaultMock",
            "src": "contracts/mocks/MockVault_flattened.sol:2904"
          },
          {
            "label": "name",
            "offset": 0,
            "slot": "99",
            "type": "t_string_storage",
            "contract": "InceptionVaultMock",
            "src": "contracts/mocks/MockVault_flattened.sol:2907"
          },
          {
            "label": "_stakerImplementation",
            "offset": 0,
            "slot": "100",
            "type": "t_address",
            "contract": "InceptionVaultMock",
            "src": "contracts/mocks/MockVault_flattened.sol:2910"
          },
          {
            "label": "ratioFeed",
            "offset": 0,
            "slot": "101",
            "type": "t_contract(IInceptionRatioFeed)4097",
            "contract": "InceptionVaultMock",
            "src": "contracts/mocks/MockVault_flattened.sol:2919"
          },
          {
            "label": "treasury",
            "offset": 0,
            "slot": "102",
            "type": "t_address",
            "contract": "InceptionVaultMock",
            "src": "contracts/mocks/MockVault_flattened.sol:2920"
          },
          {
            "label": "protocolFee",
            "offset": 20,
            "slot": "102",
            "type": "t_uint64",
            "contract": "InceptionVaultMock",
            "src": "contracts/mocks/MockVault_flattened.sol:2921"
          },
          {
            "label": "maxBonusRate",
            "offset": 0,
            "slot": "103",
            "type": "t_uint64",
            "contract": "InceptionVaultMock",
            "src": "contracts/mocks/MockVault_flattened.sol:2924"
          },
          {
            "label": "optimalBonusRate",
            "offset": 8,
            "slot": "103",
            "type": "t_uint64",
            "contract": "InceptionVaultMock",
            "src": "contracts/mocks/MockVault_flattened.sol:2925"
          },
          {
            "label": "depositUtilizationKink",
            "offset": 16,
            "slot": "103",
            "type": "t_uint64",
            "contract": "InceptionVaultMock",
            "src": "contracts/mocks/MockVault_flattened.sol:2926"
          },
          {
            "label": "maxFlashFeeRate",
            "offset": 24,
            "slot": "103",
            "type": "t_uint64",
            "contract": "InceptionVaultMock",
            "src": "contracts/mocks/MockVault_flattened.sol:2929"
          },
          {
            "label": "optimalWithdrawalRate",
            "offset": 0,
            "slot": "104",
            "type": "t_uint64",
            "contract": "InceptionVaultMock",
            "src": "contracts/mocks/MockVault_flattened.sol:2930"
          },
          {
            "label": "withdrawUtilizationKink",
            "offset": 8,
            "slot": "104",
            "type": "t_uint64",
            "contract": "InceptionVaultMock",
            "src": "contracts/mocks/MockVault_flattened.sol:2931"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_struct(InitializableStorage)7_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Ownable2StepStorage)143_storage": {
            "label": "struct Ownable2StepUpgradeable.Ownable2StepStorage",
            "members": [
              {
                "label": "_pendingOwner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)82_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(PausableStorage)193_storage": {
            "label": "struct PausableUpgradeable.PausableStorage",
            "members": [
              {
                "label": "_paused",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ReentrancyGuardStorage)254_storage": {
            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
            "members": [
              {
                "label": "_status",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_array(t_struct(Withdrawal)3355_storage)dyn_storage": {
            "label": "struct IEigenLayerHandler.Withdrawal[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)37_storage": {
            "label": "uint256[37]",
            "numberOfBytes": "1184"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_contract(IERC20)1004": {
            "label": "contract IERC20",
            "numberOfBytes": "20"
          },
          "t_contract(IInceptionRatioFeed)4097": {
            "label": "contract IInceptionRatioFeed",
            "numberOfBytes": "20"
          },
          "t_contract(IInceptionToken)3858": {
            "label": "contract IInceptionToken",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_struct(Withdrawal)3355_storage)": {
            "label": "mapping(address => struct IEigenLayerHandler.Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Withdrawal)3355_storage": {
            "label": "struct IEigenLayerHandler.Withdrawal",
            "members": [
              {
                "label": "epoch",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "receiver",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.Ownable2Step": [
            {
              "contract": "Ownable2StepUpgradeable",
              "label": "_pendingOwner",
              "type": "t_address",
              "src": "contracts/mocks/MockVault_flattened.sol:423",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/mocks/MockVault_flattened.sol:297",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "contracts/mocks/MockVault_flattened.sol:670",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "contracts/mocks/MockVault_flattened.sol:505",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "contracts/mocks/MockVault_flattened.sol:75",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "contracts/mocks/MockVault_flattened.sol:79",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "9d221b99718de6ba1c1e4ceb5d533584bdf227297ed2501cd4dc4e29493a89f6": {
      "address": "0x83541dA4d223e9A92872ACc6b4f6FcE1384cb1Fb",
      "txHash": "0xc71a2cc8998e713e18337202ef1cb6c0bd64dd3da50ba1c54025712a455c2e60",
      "layout": {
        "solcVersion": "0.8.27",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_pendingOwner",
            "offset": 0,
            "slot": "101",
            "type": "t_address",
            "contract": "Ownable2StepUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:21"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "Ownable2StepUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:70"
          },
          {
            "label": "underlyingAsset",
            "offset": 0,
            "slot": "151",
            "type": "t_contract(IERC20)995",
            "contract": "ERC20RebalancerStorage",
            "src": "contracts/vaults/rebalancer/ERC20RebalancerStorage.sol:24"
          },
          {
            "label": "inceptionToken",
            "offset": 0,
            "slot": "152",
            "type": "t_contract(IInceptionToken)2166",
            "contract": "ERC20RebalancerStorage",
            "src": "contracts/vaults/rebalancer/ERC20RebalancerStorage.sol:25"
          },
          {
            "label": "lockBox",
            "offset": 0,
            "slot": "153",
            "type": "t_address",
            "contract": "ERC20RebalancerStorage",
            "src": "contracts/vaults/rebalancer/ERC20RebalancerStorage.sol:26"
          },
          {
            "label": "inceptionVault",
            "offset": 0,
            "slot": "154",
            "type": "t_contract(IInceptionVault)1911",
            "contract": "ERC20RebalancerStorage",
            "src": "contracts/vaults/rebalancer/ERC20RebalancerStorage.sol:27"
          },
          {
            "label": "operator",
            "offset": 0,
            "slot": "155",
            "type": "t_address",
            "contract": "ERC20RebalancerStorage",
            "src": "contracts/vaults/rebalancer/ERC20RebalancerStorage.sol:29"
          },
          {
            "label": "lastTx",
            "offset": 0,
            "slot": "156",
            "type": "t_struct(Transaction)1920_storage",
            "contract": "ERC20RebalancerStorage",
            "src": "contracts/vaults/rebalancer/ERC20RebalancerStorage.sol:31"
          },
          {
            "label": "defaultAdapter",
            "offset": 0,
            "slot": "159",
            "type": "t_address_payable",
            "contract": "ERC20RebalancerStorage",
            "src": "contracts/vaults/rebalancer/ERC20RebalancerStorage.sol:33"
          },
          {
            "label": "defaultChainId",
            "offset": 0,
            "slot": "160",
            "type": "t_uint256",
            "contract": "ERC20RebalancerStorage",
            "src": "contracts/vaults/rebalancer/ERC20RebalancerStorage.sol:34"
          },
          {
            "label": "assetInfoTxMaxDelay",
            "offset": 0,
            "slot": "161",
            "type": "t_uint256",
            "contract": "ERC20RebalancerStorage",
            "src": "contracts/vaults/rebalancer/ERC20RebalancerStorage.sol:35"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "162",
            "type": "t_array(t_uint256)41_storage",
            "contract": "ERC20RebalancerStorage",
            "src": "contracts/vaults/rebalancer/ERC20RebalancerStorage.sol:37"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]",
            "numberOfBytes": "1312"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20)995": {
            "label": "contract IERC20",
            "numberOfBytes": "20"
          },
          "t_contract(IInceptionToken)2166": {
            "label": "contract IInceptionToken",
            "numberOfBytes": "20"
          },
          "t_contract(IInceptionVault)1911": {
            "label": "contract IInceptionVault",
            "numberOfBytes": "20"
          },
          "t_struct(Transaction)1920_storage": {
            "label": "struct IRebalancer.Transaction",
            "members": [
              {
                "label": "timestamp",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "underlyingBalance",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "inceptionTokenSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    },
    "282e0124b49f383e0311a1370ee13b2c4aaba3a36e709eba7be4b029e36dda6e": {
      "address": "0xdA612e42B5f5079D9F294A95150b531DCE9c1f88",
      "txHash": "0x954b3c2db065e67b0cd647e66d66dabf760805f6b18e9d387af8241348fb3440",
      "layout": {
        "solcVersion": "0.8.27",
        "storage": [
          {
            "label": "endpoint",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(ILayerZeroEndpointV2)2638",
            "contract": "OAppCoreUpgradeable",
            "src": "contracts/bridge-lz/LayerZero/OAppCoreUpgradeable.sol:14"
          },
          {
            "label": "peers",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint32,t_bytes32)",
            "contract": "OAppCoreUpgradeable",
            "src": "contracts/bridge-lz/LayerZero/OAppCoreUpgradeable.sol:17"
          },
          {
            "label": "eidToChainId",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint32,t_uint256)",
            "contract": "AbstractLZCrossChainAdapter",
            "src": "contracts/bridge-lz/abstract/AbstractLZCrossChainAdapter.sol:28"
          },
          {
            "label": "chainIdToEid",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_uint32)",
            "contract": "AbstractLZCrossChainAdapter",
            "src": "contracts/bridge-lz/abstract/AbstractLZCrossChainAdapter.sol:29"
          },
          {
            "label": "targetReceiver",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "AbstractCrossChainAdapter",
            "src": "contracts/bridge-lz/abstract/AbstractCrossChainAdapter.sol:21"
          },
          {
            "label": "_initialized",
            "offset": 20,
            "slot": "4",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 21,
            "slot": "4",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "55",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "56",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_pendingOwner",
            "offset": 0,
            "slot": "105",
            "type": "t_address",
            "contract": "Ownable2StepUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:21"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "106",
            "type": "t_array(t_uint256)49_storage",
            "contract": "Ownable2StepUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:70"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(ILayerZeroEndpointV2)2638": {
            "label": "contract ILayerZeroEndpointV2",
            "numberOfBytes": "20"
          },
          "t_mapping(t_uint256,t_uint32)": {
            "label": "mapping(uint256 => uint32)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint32,t_bytes32)": {
            "label": "mapping(uint32 => bytes32)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint32,t_uint256)": {
            "label": "mapping(uint32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    }
  }
}
