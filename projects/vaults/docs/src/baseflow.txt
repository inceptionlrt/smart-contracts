  @startuml

  participant User #LightBlue
  participant InceptionVault_S as Vault <<.sol>>
  participant iToken <<.sol>>
  participant IOperator as Operator <<Backend>>
  participant AdapterHandler <<.sol>>
  participant IIBaseAdapter <<.sol>>
  participant WithdrawalQueue <<.sol>>
  participant Strategy #Gold

  title Base flow

  == Deposit ==
  User -> Vault: //deposit(assets)//
  note left: <color:gray>or <color:black>//depositWithReferral(assets, code)//\n<color:gray>or <color:black>//mint(shares)//
  Vault --> Vault: calc bonus
  note left: based on //depositBonusAmount// (provided for deposits to incentivize staking)
  Vault -> iToken: //mint(shares)//
  Vault --> Vault: <back:yellow>//totalAssets//=10, //totalSupply//=10
  Vault -> User: transfer shares (//assets * ratio//)
  User --> User: user balance: <back:yellow>//shares//=10

  Operator -> AdapterHandler: //delegate(assets)//
  AdapterHandler -> IIBaseAdapter: //delegate(assets)//
  AdapterHandler --> AdapterHandler: <back:yellow>//totalAssets//=0, //totalDelegated//=10
  IIBaseAdapter -> Strategy: delegate


  == Withdrawal ==
  User -> Vault: //withdraw(shares)//\n<back:yellow> 2 shares
  User --> User: user balance: <back:yellow>//shares//=8
  Vault -> iToken: //burn()//\n<back:yellow>2 shares
  Vault --> Vault: <back:yellow>//totalAssets//=0
  Vault -> WithdrawalQueue: //request(2)//

  WithdrawalQueue --> WithdrawalQueue: update user requested shares\n<back:yellow>//totalSharesToWithdraw//=2

  Operator -> AdapterHandler: undelegate()\n(batch undelegations from adapters)
  AdapterHandler -> IIBaseAdapter: //withdraw(2 assets)//
  IIBaseAdapter -> Strategy: undelegate
  AdapterHandler -> WithdrawalQueue: //undelegate(2 assets)//
  AdapterHandler --> AdapterHandler: <back:yellow>assets //totalDelegated//=8, //totalSharesToWithdraw// = 0
  WithdrawalQueue --> WithdrawalQueue: update epoch

  Operator -> AdapterHandler: //claim(2)//\n(claim asset from adapter)
  IIBaseAdapter -> Strategy: claim
  AdapterHandler -> WithdrawalQueue: //claim(2)//
  AdapterHandler --> AdapterHandler: <back:yellow>//redeemReservedAmount//=2; //totalAssets//=2
  WithdrawalQueue --> WithdrawalQueue: update given epoch state

  User -> Vault: //redeem(2)//
  Vault -> WithdrawalQueue: //redeem(2, claimer address)//
  WithdrawalQueue --> WithdrawalQueue: mark available withdrawals as redeemed
  WithdrawalQueue -> Vault: redeemed amount
  Vault --> Vault: <back:yellow>//redeemReservedAmount//=0; //totalAssets//=0;
  Vault -> User: transfer assets
  User --> User: user balance: <back:yellow>//assets//=2, //shares//=8


  @enduml
  